---
name: MIL CI

# yamllint disable-line rule:truthy
on:
  [push, pull_request, workflow_dispatch]

env:
  # The version of caching we are using. This can be upgraded if we
  # significantly change CI to the point where old caches become irrelevant.
  CACHE_VERSION: 0
  # Default Python version. Noetic defaults to 3.8.
  DEFAULT_PYTHON: 3.8
  # Location of the pre-commit cache. This is set by pre-commit, not us!
  PRE_COMMIT_CACHE: ~/.cache/pre-commit

# Cancels this run if a new one referring to the same object and same workflow
# is requested
concurrency:
  group: >
    ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  info:
    name: Collect information about changes
    runs-on: self-hosted
    outputs:
      py_modified: ${{ steps.changes.outputs.python_files }}
      docs_modified: ${{ steps.changes.outputs.docs }}
      code_modified: ${{ steps.changes.outputs.code }}
      pre-commit_cache_key: ${{ steps.pre-commit_cache_key.outputs.key }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0  # For fetching history for branch comparison below
          token: ${{ secrets.INVESTIGATOR_BOT_TOKEN || github.token }}
          submodules: recursive
      - name: Check which targets changed
        uses: dorny/paths-filter@v2
        id: changes
        with:
          # Currently, the only code files examined by CI are those that are
          # listed below in the code filter. This means that the CI will focus
          # solely on code changes found in these folders. If significant
          # changes to code are made in other places, either those places
          # should be moved, or the CI should be updated to account for those
          # locations.
          filters: |
            docs:
              - 'docs/**'
            code:
              - 'NaviGator/**'
              - 'SubjuGator/**'
              - 'mil_common/**'
              - 'scripts/**'
            python:
              - added|modified: '**.py'

          list-files: 'shell'
      # The cache key used for the pre-commit cache is meant to identify one
      # cache of related pre-commit tooling. Changes to the Python version used
      # or the pre-commit config file should cause the hash to change and a
      # different cache to be used/generated.
      - name: Generate pre-commit cache key
        id: pre-commit_cache_key
        run: >
          echo "::set-output
          name=key::${{ env.CACHE_VERSION }}-${{ env.DEFAULT_PYTHON }}-${{
          hashFiles('.pre-commit-config.yaml') }}"

  # Why do we use pre-commit for linting instead of just installing the
  # individual linters? Good question!
  # The pre-commit config file can be hashed in order to determine changes,
  # the pre-commit config file makes it easy to install the same version of a
  # tool across everyone's computer, and we know where pre-commit stores its
  # cache, making it easy to speed up CI builds by using the same tool.
  pre-commit:
    name: Set up pre-commit
    runs-on: self-hosted
    needs:
      - info
    if: >
      ${{ needs.info.outputs.code_modified ||
      needs.info.outputs.docs_modified }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.0.2
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: "pip"
      - name: Install pre-commit hooks
        run: |
          python --version
          pip install "$(cat requirements_test.txt | grep pre-commit)"
      - name: Restore base pre-commit environment
        id: cache-pre-commmit
        uses: actions/cache@v3.0.4
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: >
            ${{ runner.os
            }}-pre-commit-${{ needs.info.outputs.pre-commit_cache_key }}
      - name: Install pre-commit dependencies if no cache
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          pre-commit install-hooks

  isort:
    name: Run isort
    runs-on: self-hosted
    needs:
      - info
      - pre-commit
    if: ${{ needs.info.outputs.code_modified }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.0.2
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: "pip"
      - name: Initialize pre-commit for use
        run: |
          python --version
          pip install "$(cat requirements_test.txt | grep pre-commit)"
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v3.0.4
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: >
            ${{ runner.os
            }}-pre-commit-${{ needs.info.outputs.pre-commit_cache_key }}
      - name: Fail job if pre-commit cache restore failed
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore pre-commit environment from cache"
          exit 1
      - name: Run isort
        run: |
          pre-commit run isort --all-files --show-diff-on-failure

  yamllint:
    name: Run yamllint
    runs-on: self-hosted
    needs:
      - info
      - pre-commit
    if: ${{ needs.info.outputs.code_modified }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.0.2
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: "pip"
      - name: Initialize pre-commit for use
        run: |
          python --version
          pip install "$(cat requirements_test.txt | grep pre-commit)"
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v3.0.4
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: >
            ${{ runner.os
            }}-pre-commit-${{ needs.info.outputs.pre-commit_cache_key }}
      - name: Fail job if pre-commit cache restore failed
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore pre-commit environment from cache"
          exit 1
      - name: Register yamllint problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/yamllint.json"
      - name: Run yamllint
        run: |
          pre-commit run yamllint --all-files --show-diff-on-failure

  black:
    name: Run black
    runs-on: self-hosted
    needs:
      - info
      - pre-commit
    if: ${{ needs.info.outputs.code_modified }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.0.2
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: "pip"
      - name: Initialize pre-commit for use
        run: |
          python --version
          pip install "$(cat requirements_test.txt | grep pre-commit)"
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v3.0.4
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: >
            ${{ runner.os
            }}-pre-commit-${{ needs.info.outputs.pre-commit_cache_key }}
      - name: Fail job if pre-commit cache restore failed
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore pre-commit environment from cache"
          exit 1
      - name: Run black
        run: |
          pre-commit run black --all-files --show-diff-on-failure

  clang-format:
    name: Run clang-format
    runs-on: self-hosted
    needs:
      - info
      - pre-commit
    if: ${{ needs.info.outputs.code_modified }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.0.2
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: "pip"
      - name: Initialize pre-commit for use
        run: |
          python --version
          pip install "$(cat requirements_test.txt | grep pre-commit)"
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v3.0.4
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: >
            ${{ runner.os
            }}-pre-commit-${{ needs.info.outputs.pre-commit_cache_key }}
      - name: Fail job if pre-commit cache restore failed
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore pre-commit environment from cache"
          exit 1
      - name: Run clang-format
        run: |
          pre-commit run clang-format --all-files --show-diff-on-failure

  pyupgrade:
    name: Run pyupgrade
    runs-on: self-hosted
    needs:
      - info
      - pre-commit
    if: ${{ needs.info.outputs.code_modified }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.0.2
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: "pip"
      - name: Initialize pre-commit for use
        run: |
          python --version
          pip install "$(cat requirements_test.txt | grep pre-commit)"
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v3.0.4
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: >
            ${{ runner.os
            }}-pre-commit-${{ needs.info.outputs.pre-commit_cache_key }}
      - name: Fail job if pre-commit cache restore failed
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore pre-commit environment from cache"
          exit 1
      - name: Run pyupgrade
        run: |
          pre-commit run pyupgrade --all-files --show-diff-on-failure

  codespell:
    name: Run codespell
    runs-on: self-hosted
    needs:
      - info
      - pre-commit
    if: >
      ${{ needs.info.outputs.code_modified
      || needs.info.outputs.docs_modified }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.0.2
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: "pip"
      - name: Initialize pre-commit for use
        run: |
          python --version
          pip install "$(cat requirements_test.txt | grep pre-commit)"
      - name: Restore pre-commit environment from cache
        id: cache-precommit
        uses: actions/cache@v3.0.4
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: >
            ${{ runner.os
            }}-pre-commit-${{ needs.info.outputs.pre-commit_cache_key }}
      - name: Fail job if pre-commit cache restore failed
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore pre-commit environment from cache"
          exit 1
      - name: Run pyupgrade
        run: |
          pre-commit run codespell --all-files --show-diff-on-failure

  catkin_test:
    name: Generate catkin_test_results
    runs-on: self-hosted
    needs:
      - info
    if: >
      ${{ needs.info.outputs.code_modified ||
          needs.info.outputs.docs_modified}}
    steps:
      - name: Configure catkin workspace folder structure
        run: |
          mkdir -p $GITHUB_WORKSPACE/catkin_ws/src
      - name: Check out code from GitHub
        uses: actions/checkout@v3.0.2
        with:
          submodules: recursive
          path: catkin_ws/src/mil
      - name: Setup ROS Noetic
        uses: ros-tooling/setup-ros@v0.3
        with:
          required-ros-distributions: noetic
      - name: Install the latest dependencies
        run: |
          ls $GITHUB_WORKSPACE/catkin_ws/src/mil; ls catkin_ws/src/mil
          sudo apt-get update -y
          sudo apt-get upgrade -y
      - name: Install pip dependencies
        run: |
          # Ignore installations provided by ros-tooling; they can cause
          # conflicts
          sudo pip install -I -r requirements.txt
      - name: Install system dependencies
        run: |
          ./scripts/system_install
      - name: Install user dependencies
        continue-on-error: true
        run: |
          # Exits with zero because of error with darknet_ros in user_install
          ./scripts/user_install
      - name: Run catkin_make
        run: |
          export HOME=$GITHUB_WORKSPACE # Temporary fix for setup scripts
          cd $GITHUB_WORKSPACE/catkin_ws
          source /opt/ros/noetic/setup.bash
          catkin_make -DCATKIN_BLACKLIST_PACKAGES="darknet_ros"
      - name: Get test results
        run: >
          source /opt/ros/noetic/setup.bash

          catkin_test_results $GITHUB_WORKSPACE/catkin_ws/build/test_results
          --verbose

  pyright:
    name: Run pyright
    runs-on: self-hosted
    needs:
      - info
    if: ${{ needs.info.outputs.code_modified }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.0.2
      - name: Run pyright
        uses: jakebailey/pyright-action@v1
        continue-on-error: true
        with:
          version: 1.1.260
          python-version: ${{ env.DEFAULT_PYTHON }}
          python-platform: Linux
          extra-args: ${{ needs.info.outputs.py_modified }}

  pylint:
    name: Run pylint
    runs-on: self-hosted
    needs:
      - info
    if: ${{ needs.info.outputs.code_modified }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.0.2
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: "pip"
      - name: Install test dependencies
        run: |
          pip install -r requirements_test.txt
      - name: Register pylint problem matcher
        run: |
          echo "::add-matcher::.github/workflows/matchers/pylint.json"
      - name: Run pylint
        continue-on-error: true
        run: |
          pylint $(git ls-files "*.py")

  docs:
    name: Build docs
    runs-on: self-hosted
    needs:
      - info
      - catkin_test
    if: >
      ${{ needs.info.outputs.code_modified ||
          needs.info.outputs.docs_modified}}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3.0.2
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: "pip"
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          sudo apt-get install doxygen doxygen-doc doxygen-gui graphviz
      - name: Build docs
        run: |
          export HOME=$GITHUB_WORKSPACE # Temporary fix for setup scripts
          mkdir $HOME/.mil
          ./scripts/build_docs -D
      - name: Publish docs artifact
        uses: actions/upload-artifact@v3
        with:
          name: >
            docs-${{ github.workflow }}-${{ github.event.pull_request.number
            || github.ref }}
          path: $GITHUB_WORKSPACE/.mil/docs
