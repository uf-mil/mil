<launch>
    <arg name="3dmouse" default="false" />
    <arg name="demo_mode" default="false" />

    <!-- <param name="use_sim_time" value="true" /> -->
    <param name="simulate" value="true" />
    <param name="3dmouse" value="$(arg 3dmouse)" type="bool" />

    <!-- Alarm system -->
    <node pkg="subjugator_alarm" type="alarm_handler.py" name="subjugator_alarm_handler" output="screen" />

    <!-- Vehicle control -->
    <include file="$(find subjugator_thruster_mapper)/launch/thruster_mapper.launch" />
    <include file="$(find sub8_videoray_m5_thruster)/launch/thruster_driver.launch" />
    <include file="$(find subjugator_launch)/launch/subsystems/rise.launch" />

    <group if="$(arg demo_mode)" >
        <!-- If we're in demo mode - we use a super simple perfect knowledge controller
            This is so that things like the TGEN can be tested when our sophisticated controllers are not yet ready -->
        <node pkg="subjugator_controller" type="pd_controller" name="pdcontroller" output="screen"/>
    </group>

    <!-- Actual Simulation -->
    <remap from="/truth/odom" to="/odom" />
    <node pkg="subjugator_simulation" type="simulate.py" name="subjugator_simulation" output="screen" />

    <group if="$(arg 3dmouse)" >
        <!-- ROS Node for interface with 3D Mouse -->
        <node pkg="spacenav_node" type="spacenav_node" name="spacenav_node" output="screen">
          <param name="zero_when_static" value="true" />
          <param name="static_count_threshold" value="30" />
        </node>

        <!-- 3D Mouse Remapper node (Our own) -->
        <node pkg="subjugator_simulation" type="spacenav_remap.py" name="spacenav_remap" output="screen" >
            <rosparam name="behavior" value="wrench" />
        </node>
    </group>

    <include file="$(find subjugator_launch)/launch/tf.launch" />
    <node pkg="nodelet" type="nodelet" args="standalone odometry_utils/odometry_to_tf" name="odometry_to_tf"/>
    <node pkg="nodelet" type="nodelet" name="transform_odometry" args="standalone odometry_utils/transform_odometry">
        <rosparam>
            frame_id: map
            child_frame_id: /base_link
        </rosparam>
        <remap from="orig_odom" to="imu_odom"/>
    </node>


</launch>
