#!/usr/bin/env python3
import argparse
import json

import rospy
from actionlib import TerminalState
from mil_missions_core import MissionClient


class MissionClientCli:
    """
    Node to send and monitor a new mission, cancel a mission, or cancel the current
    missions. Verbosely prints current state and fedback to the terminal.
    """

    def __init__(self):
        self.client = MissionClient()
        connected = self.client.wait_for_server(rospy.Duration(0.25))
        if not connected:  # If it didn't connect quickly, print and wait forever
            print("Waiting on action server at ", self.client.NS)
            self.client.wait_for_server()
        self.running = (
            False  # Tracks if we are currently waiting for a mission to finish
        )
        rospy.on_shutdown(self.on_shutdown)

    @classmethod
    def list(cls) -> None:
        missions = MissionClient.available_missions()
        if not missions:
            print(
                "{} param not set. Is mission runner running?".format(
                    MissionClient.LIST_PARAM
                )
            )
            return
        print("Available Missions:")
        for mission in missions:
            print("- ", mission)

    def cancel_all(self) -> None:
        self.client.cancel_all_goals()

    def _feedback_cb(self, msg) -> None:
        if self.first_feedback:
            self.first_feedback = False
            print("Feedback:")
        print("- ", msg.message)

    def on_shutdown(self) -> None:
        """
        If shutdown (rosnode kill, Control+C, etc), cancel the current goal if
        we sent one.
        """
        if self.running:
            print("Cancelling goal")
            self.cancel_all()

    def run_mission(self, mission, parameters):
        self.first_feedback = True
        print("Starting mission ", mission)
        self.running = True
        self.client.run_mission(mission, parameters, feedback_cb=self._feedback_cb)
        self.client.wait_for_result()
        result = self.client.get_result()
        self.running = False
        if result is None:
            return
        state = self.client.get_state()
        if state != TerminalState.SUCCEEDED:
            print("Goal finished with state ", TerminalState.to_string(state))
        print("Goal successful" if result.success else "Goal unsuccessful")
        if result.result != "":
            print(f"Result: '{result.result}'")
        if len(result.parameters) > 0:
            try:
                x = json.loads(result.parameters)
                if not isinstance(x, dict):
                    raise ValueError("not dict")
                for key, value in x.items():
                    print(f"{key}: {value}")
            except ValueError:
                print("could not decode result parameters")


def main():
    argv = rospy.myargv()
    parser = argparse.ArgumentParser(
        description="Runs a mission on the mission_runner server"
    )
    subparser = parser.add_subparsers()

    list_parser = subparser.add_parser("list", help="List available missions")
    list_parser.set_defaults(cmd="list")

    cancel_parser = subparser.add_parser("cancel", help="Cancel current mission")
    cancel_parser.set_defaults(cmd="cancel")

    run_parser = subparser.add_parser("run", help="Start a new mission")
    run_parser.set_defaults(cmd="run")
    run_parser.add_argument("mission", help="name of mission to run")
    run_parser.add_argument(
        "parameters",
        nargs=argparse.REMAINDER,
        help="list of parameters to pass to mission.\
                                                       Will be concatenated into one string",
    )
    args = parser.parse_args(argv[1:])

    if args.cmd == "list":
        MissionClientCli.list()
        return
    rospy.init_node("mission_client", anonymous=True)
    client = MissionClientCli()
    if args.cmd == "cancel":
        client.cancel_all()
        print("All goals canceled")
        return
    assert args.cmd == "run"
    parameters = " ".join(args.parameters)
    client.run_mission(args.mission, parameters)


if __name__ == "__main__":
    main()
