#!/usr/bin/env python3
import rospy
import tf2_geometry_msgs  # noqa
import tf2_ros
from geometry_msgs.msg import PointStamped
from mil_bounds import BoundsClient
from mil_tools import rosmsg_to_numpy


class BoundsFromRVIZ(BoundsClient):
    def __init__(self, frame, ignore_stamp):
        super().__init__()
        self.tf_buffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.tf_buffer)
        self.frame = frame
        self.ignore_stamp = ignore_stamp
        self.points = []
        self.sub = rospy.Subscriber(
            "clicked_point",
            PointStamped,
            self._cb,
            queue_size=4,
        )

    def _cb(self, msg):
        if self.ignore_stamp:
            msg.header.stamp = rospy.Time()
        if self.frame is not None and msg.header.frame_id != self.frame:
            try:
                msg = self.tf_buffer.transform(
                    msg,
                    self.frame,
                    timeout=rospy.Duration(10, 0),
                )
            except tf2_ros.TransformException as err:
                rospy.logerr(f"Transform error: {err}")
                return
        rospy.loginfo(f"Recievied point {len(self.points) + 1} of 4")
        self.points.append(rosmsg_to_numpy(msg.point))
        if len(self.points) == 4:
            self.sub.unregister()

    def set_from_rviz(self):
        r = rospy.Rate(2)
        while len(self.points) != 4 and not rospy.is_shutdown():
            r.sleep()
        if rospy.is_shutdown():
            return
        self.set_bounds(self.points, frame=self.frame)
        rospy.loginfo("done")


if __name__ == "__main__":
    rospy.init_node("bounds_from_rviz", anonymous=True)
    frame = rospy.get_param("~frame", "ECEF")
    ignore_stamp = rospy.get_param("~ignore_stamp", False)
    b = BoundsFromRVIZ(frame, ignore_stamp)
    b.set_from_rviz()
