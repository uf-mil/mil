#!/usr/bin/env python3
from __future__ import annotations

import asyncio
import importlib
import inspect
import json
import traceback
import types

import axros
import uvloop
from axros import NodeHandle, Service, action, util
from mil_missions.msg import DoMissionAction, DoMissionFeedback, DoMissionResult
from mil_missions_core import BaseMission, MissionResult, SubmissionException
from std_srvs.srv import Trigger, TriggerRequest, TriggerResponse


class MissionRunner:
    """
    Node which runs the missions server, receiving goals from a client
    to run a mission, cancel a mission, and publish feedback.

    Args:
        missions_loaded (bool): Whether the mission classes have been loaded.
    """

    missions_loaded: bool
    base_mission: type[BaseMission]
    missions: dict[str, type[BaseMission]]

    def __init__(self):
        pass

    async def init(self):
        """
        Initialize the action server, import the missions from the mission module, call init, functions
        and prepare for the first mission goal.
        """
        # Create NodeHandle and action server
        self.nh = NodeHandle.from_argv("mission_runner")
        await self.nh.setup()
        self.server = action.SimpleActionServer(self.nh, "/mission", DoMissionAction)
        await self.server.setup()

        # Load in all missions for the first time
        self.missions_loaded = False
        # If loading missions istaking too long, then it might be the case:
        #   1) The missions module can not be imported quickly.
        #   2) The base mission is not being initialized fully.
        await util.wrap_time_notice(
            self.load_missions(), 10, "Loading missions in mission runner"
        )

        # Set current mission to None
        self.mission_future = None
        self.mission = None

        # Start a service to refresh missions
        self.refresh_service = Service(
            self.nh, "~refresh_missions", Trigger, self.refresh_missions_cb
        )
        await self.refresh_service.setup()

        # Register callbacks for new goals and start the action server
        self.server.register_preempt_callback(self.check_new_mission)
        self.server.register_goal_callback(self.check_new_mission)
        self.server.start()

        # Reload missions one more time
        await self.load_missions()

    async def shutdown(self) -> None:
        # If the node was shutdown by another program, then there is no reason to
        # shut it down again.
        if self.nh._is_running:
            await self.nh.shutdown()

    async def refresh_missions_cb(self, _: TriggerRequest) -> TriggerResponse:
        try:
            await self.load_missions()
            return TriggerResponse(True, "The missions were refreshed!")
        except Exception as e:
            traceback.print_exc()
            return TriggerResponse(
                False,
                f"An error of type {e.__class__.__name__} occurred while refreshing: {e}",
            )

    async def _shutdown_missions(self):
        # If we've already loaded missions, we need to shutdown existing missions
        if self.missions_loaded:
            try:
                await asyncio.wait_for(self.base_mission.shutdown_base(), timeout=10)
            except AttributeError:
                pass

            for _, mission in self.missions.items():
                try:
                    await mission.shutdown()
                except AttributeError:
                    # The mission class may not need to be shutdown (this is okay!)
                    pass

    async def load_missions(self):
        """
        Gets the name of the missions module and base mission from ROS parameters
        before importing the module and the base mission, and calling the base
        missions' _init() method.

        All missions from the module are saved to ``self.missions``.
        """
        await axros.wrap_time_notice(
            self._shutdown_missions(), 3, "Shutting down missions"
        )
        self.missions = {}

        # Get mission_module and base_mission from params, if not set just crash
        mission_module_name = await self.nh.get_param("~missions_module")
        base_mission_name = await self.nh.get_param("~base_mission")
        assert isinstance(mission_module_name, str) and isinstance(
            base_mission_name, str
        )
        if self.missions_loaded:
            self.mission_module = importlib.reload(self.mission_module)
            self.imported_modules = [self.mission_module]
            for attribute_name in dir(self.mission_module):
                attribute = getattr(self.mission_module, attribute_name)
                if isinstance(attribute, types.ModuleType):
                    self.imported_modules.append(importlib.reload(attribute))
        else:
            self.mission_module = importlib.import_module(mission_module_name)
            self.imported_modules = [self.mission_module]

        # Import and init the base mission
        if not hasattr(self.mission_module, base_mission_name):
            raise Exception("Base mission not in module")
        self.base_mission = getattr(self.mission_module, base_mission_name)
        assert issubclass(self.base_mission, BaseMission)

        # Import all missions which extend the base class and initialize them
        await self.base_mission.setup_base(self)

        for mod in self.imported_modules:
            for name, cls in inspect.getmembers(mod):
                if (
                    inspect.isclass(cls)
                    and issubclass(cls, self.base_mission)
                    and name != base_mission_name
                    and name not in self.missions
                ):
                    await axros.wrap_time_notice(
                        cls.setup(), 1, f"Setting up the {name} mission"
                    )
                    self.missions[cls.name()] = cls

        # Set available missions param with list of all imported missions
        await self.nh.set_param("/available_missions", list(self.missions.keys()))
        self.missions_loaded = True

    def has_mission(self, mission: str) -> bool:
        """
        Returns true if a mission with the specified name is available
        """
        return mission in self.missions

    def get_mission(self, mission: str):
        return self.missions[mission]

    def send_feedback(self, message):
        """
        Publishes feedback for the current goal
        """
        if self.mission is None:
            print("Tried to send feedback when mission is None...")
            return
        feedback = DoMissionFeedback()
        feedback.message = message
        # Also print it out
        print(message)
        self.server.publish_feedback(feedback)

    def do_new_mission(self):
        """
        Accept a new goal and start running it
        """
        if not self.server.is_new_goal_available():
            return
        goal = self.server.accept_new_goal()
        if not self.has_mission(goal.mission):
            print(f"TASK RUNNER: unrecognized mission '{goal.mission}'")
            self.server.set_aborted(
                result=DoMissionResult(success=False, result="mission unknown")
            )
            return

        # Attempt to decode parameters, abort if there is an exception
        try:
            parameters = self.missions[goal.mission].decode_parameters(goal.parameters)
        except Exception as e:
            self.server.set_aborted(
                result=DoMissionResult(success=False, result=str(e))
            )
            return

        # Start mission, and create callbacks even if it is not a deferred
        self.mission = self.missions[goal.mission]()
        self.mission_future = asyncio.create_task(self.run_with_callback(parameters))
        self.mission_future.add_done_callback(self.mission_finished_cb)

    async def run_with_callback(self, parameters):
        try:
            return await self.mission.run(parameters)
        except Exception as e:
            raise SubmissionException(self.mission, e) from e

    def check_new_mission(self):
        """
        Called by SimpleActionServer when a new goal is available or cancel request
        comes in.
        """
        # If cancel request came in, cancel current mission
        if self.mission_future is not None and self.server.is_cancel_requested():
            self.mission_future.cancel()
        # If a new mission came in, cancel current mission
        elif self.mission_future is not None and self.server.is_preempt_requested():
            self.mission_future.cancel()
        # Try to accept a new mission
        self.do_new_mission()

    def mission_finished_cb(self, task: asyncio.Task):
        """
        Called when the current mission finishes successfully, is canceled, is preempted by another
        mission, or raises an exception. Publishes the correct result to the action clients.
        """
        result = DoMissionResult()

        try:
            task_result = task.result()
        except asyncio.CancelledError:
            print(
                f"Instance of {self.mission.__class__.__name__} mission was cancelled."
            )
            result.result = "mission cancelled"
            self.server.set_aborted(result=result, text=result.result)
        except Exception as e:
            # If mission failed / was canceled, abort mission
            result.success = False

            # If mission raised another kind of exception (like key error), return message and traceback
            result.result = str(e)
            result.parameters = json.dumps({"traceback": traceback.format_exc()})
            self.server.set_aborted(result=result, text=result.result)

        # If mission was successful, set goal to succeeded with specified result
        else:
            result.success = True
            if isinstance(task_result, MissionResult):
                result.result = task_result.message
                result.parameters = json.dumps(task_result.parameters)
            else:
                result.result = str(task_result)
            result.success = True
            self.server.set_succeeded(result=result, text=result.result)

        # Result mission variables and see if a new mission is available
        self.mission = None
        self.mission_future = None
        self.check_new_mission()


async def main():
    """
    Start the mission server, crashing if the init function fails.
    """
    t = MissionRunner()
    try:
        await t.init()
        await asyncio.Future()
    except asyncio.CancelledError:
        print("Mission runner received KeyboardInterrupt, shutting down...")
        await t.shutdown()


if __name__ == "__main__":
    t = MissionRunner()
    try:
        uvloop.install()
        asyncio.run(main())
    except KeyboardInterrupt:
        print("...all mission runner tasks were cancelled.")
